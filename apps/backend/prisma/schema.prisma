// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator library {
  provider = "prisma-client-js"
  output   = "../../../packages/prisma-model"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())

  email    String  @unique
  password String
  name     String?

  role   UserRole? @relation(fields: [roleId], references: [id])
  roleId String?   @map("role_id")

  @@map("user")
}

enum UserType {
  default
  superuser
  admin
  helper
}

model UserRole {
  id          String        @id @default(cuid())
  name        String?
  permissions Permissions[] @default([])
  User        User[]

  @@map("user_role")
}

// List of permissions that can be applied to role
enum Permissions {
  all

  // Edit strings
  editStrings

  // Projects
  createProjects
  updateProjects
  deleteProjects
}

model Project {
  id String @id @default(cuid())

  // Locales
  name String?
  desc String?

  // Relations
  StackOfProject StackOfProject[]

  @@map("project")
}

model StackOfProject {
  id String @id @default(cuid())

  // Many-to-many relations
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String    @map("project_id")
  stackTech   StackTech @relation(fields: [stackTechId], references: [id], onDelete: Cascade)
  stackTechId String    @map("stack_tech_id")

  @@map("stack_of_project")
}

enum StackType {
  frontend
  backend
}

model StackTech {
  id       String    @id @default(cuid())
  type     StackType
  iconName String?   @map("icon_name")
  name     String
  color    String?

  // Relations
  StackOfProject StackOfProject[]

  @@map("stack_tech")
}
